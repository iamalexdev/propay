import telebot
from telebot import types
import sqlite3
import uuid
from datetime import datetime
import html
import re
import time
import os
import requests
import json
from bs4 import BeautifulSoup
from flask import Flask, render_template
import threading

# Configuraci√≥n
TOKEN = "8400947960:AAGGXHezQbmUqk6AOpgT1GqMLaF-rMvVp9Y"
GROUP_CHAT_ID = "-4932107704"
ADMIN_ID = 1853800972
bot = telebot.TeleBot(TOKEN)

# Crear app Flask para Render
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ QvaPay Bot est√° funcionando"

@app.route('/health')
def health():
    return "‚úÖ OK", 200

# Diccionarios para operaciones pendientes
pending_deposits = {}
pending_withdrawals = {}
pending_crypto_deposits = {}
p2p_orders = {}
p2p_trades = {}

# APIs para tasas de cambio
API_ENDPOINTS = {
    "eltoque": "https://eltoque.com/tasas-de-cambio-de-moneda-en-cuba-hoy",
    "binance": "https://api.binance.com/api/v3/ticker/price",
    "coingecko": "https://api.coingecko.com/api/v3/simple/price"
}

# Monedas soportadas
SUPPORTED_CRYPTO = {
    "BTC": "bitcoin",
    "ETH": "ethereum", 
    "USDT": "tether",
    "BNB": "binancecoin",
    "ADA": "cardano",
    "DOT": "polkadot",
    "SOL": "solana"
}

# Datos de productos para la tienda
SHOP_PRODUCTS = {
    "1": {
        "name": "üéÆ Steam Wallet $10",
        "price": 2500,
        "currency": "CUP",
        "description": "C√≥digo de Steam Wallet de $10 USD",
        "stock": 50
    },
    "2": {
        "name": "üì± Recarga M√≥vil 5GB",
        "price": 1200,
        "currency": "CUP", 
        "description": "Paquete de datos 5GB para m√≥vil",
        "stock": 100
    },
    "3": {
        "name": "üéµ Spotify Premium 1 Mes",
        "price": 800,
        "currency": "CUP",
        "description": "Suscripci√≥n Spotify Premium 1 mes",
        "stock": 30
    },
    "4": {
        "name": "üì∫ Netflix Basic 1 Mes",
        "price": 1800,
        "currency": "CUP",
        "description": "Suscripci√≥n Netflix Basic 1 mes",
        "stock": 25
    },
    "5": {
        "name": "üíª Microsoft Office 365",
        "price": 3000,
        "currency": "CUP",
        "description": "Licencia Office 365 1 a√±o",
        "stock": 15
    },
    "6": {
        "name": "üõ°Ô∏è VPN Premium 1 A√±o",
        "price": 2200,
        "currency": "CUP",
        "description": "Servicio VPN Premium 12 meses",
        "stock": 40
    }
}

# Funci√≥n para obtener tasa CUP/USD desde ElToque
def get_cup_usd_rate():
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        response = requests.get(API_ENDPOINTS["eltoque"], headers=headers, timeout=10)
        soup = BeautifulSoup(response.content, 'html.parser')
        
        elements = soup.find_all(['div', 'span'], string=re.compile(r'1\s*USD\s*=\s*[\d,.]+\s*CUP'))
        
        for element in elements:
            text = element.get_text()
            match = re.search(r'1\s*USD\s*=\s*([\d,.]+)\s*CUP', text)
            if match:
                rate = float(match.group(1).replace(',', ''))
                print(f"‚úÖ Tasa CUP/USD obtenida: {rate}")
                return rate
        
        return 240.0
        
    except Exception as e:
        print(f"‚ùå Error obteniendo tasa CUP/USD: {e}")
        return 240.0

# Funci√≥n para obtener precios crypto
def get_crypto_price(symbol):
    try:
        if symbol == "USDT":
            return 1.0
            
        url = f"{API_ENDPOINTS['binance']}?symbol={symbol}USDT"
        response = requests.get(url, timeout=10)
        data = response.json()
        return float(data['price'])
    except Exception as e:
        print(f"‚ùå Error obteniendo precio de {symbol}: {e}")
        default_prices = {
            "BTC": 50000, "ETH": 3000, "BNB": 400, 
            "ADA": 0.5, "DOT": 7, "SOL": 100
        }
        return default_prices.get(symbol, 1.0)

# Funci√≥n para enviar notificaciones al grupo
def send_group_notification(message, photo_id=None):
    try:
        if photo_id:
            bot.send_photo(
                chat_id=GROUP_CHAT_ID,
                photo=photo_id,
                caption=message,
                parse_mode='Markdown'
            )
        else:
            bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=message,
                parse_mode='Markdown'
            )
        return True
    except Exception as e:
        print(f"‚ùå Error enviando notificaci√≥n: {e}")
        return False

# Inicializar Base de Datos
def init_db():
    conn = sqlite3.connect('qvapay.db')
    cursor = conn.cursor()
    
    # Tabla de usuarios
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            balance REAL DEFAULT 0.0,
            qvapay_id TEXT UNIQUE,
            registered_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Tabla de transacciones
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            transaction_id TEXT PRIMARY KEY,
            from_user INTEGER,
            to_user INTEGER,
            amount REAL,
            currency TEXT DEFAULT 'QVP',
            transaction_type TEXT,
            status TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Tabla de P2P
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS p2p_orders (
            order_id TEXT PRIMARY KEY,
            user_id INTEGER,
            order_type TEXT,
            currency TEXT,
            amount REAL,
            price REAL,
            total REAL,
            payment_method TEXT,
            status TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Tabla de trades P2P
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS p2p_trades (
            trade_id TEXT PRIMARY KEY,
            order_id TEXT,
            buyer_id INTEGER,
            seller_id INTEGER,
            amount REAL,
            price REAL,
            total REAL,
            status TEXT,
            escrow_released BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            completed_at TIMESTAMP
        )
    ''')
    
    # Tabla de productos comprados
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_id TEXT,
            product_name TEXT,
            price_paid REAL,
            purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT 'active'
        )
    ''')
    
    conn.commit()
    conn.close()

# Funci√≥n para escapar texto para Markdown
def escape_markdown(text):
    if text is None:
        return ""
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in escape_chars:
        text = str(text).replace(char, f'\\{char}')
    return text

# Verificar si es administrador
def is_admin(user_id):
    return user_id == ADMIN_ID

# Generar ID √∫nico QvaPay
def generate_qvapay_id():
    return f"QVP{uuid.uuid4().hex[:8].upper()}"

# Registrar usuario
def register_user(user_id, username, first_name):
    conn = sqlite3.connect('qvapay.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    if not user:
        qvapay_id = generate_qvapay_id()
        cursor.execute('''
            INSERT INTO users (user_id, username, first_name, qvapay_id, balance)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, qvapay_id, 0.0))
        conn.commit()
    
    conn.close()

# Obtener informaci√≥n del usuario
def get_user_info(user_id):
    conn = sqlite3.connect('qvapay.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

# Actualizar balance
def update_balance(user_id, amount):
    conn = sqlite3.connect('qvapay.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    conn.commit()
    conn.close()

# Registrar transacci√≥n
def log_transaction(transaction_id, from_user, to_user, amount, transaction_type, status):
    conn = sqlite3.connect('qvapay.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO transactions (transaction_id, from_user, to_user, amount, transaction_type, status)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (transaction_id, from_user, to_user, amount, transaction_type, status))
    conn.commit()
    conn.close()

# Registrar orden P2P
def log_p2p_order(order_id, user_id, order_type, currency, amount, price, total, payment_method, status):
    conn = sqlite3.connect('qvapay.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO p2p_orders (order_id, user_id, order_type, currency, amount, price, total, payment_method, status)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (order_id, user_id, order_type, currency, amount, price, total, payment_method, status))
    conn.commit()
    conn.close()

# Registrar trade P2P
def log_p2p_trade(trade_id, order_id, buyer_id, seller_id, amount, price, total, status):
    conn = sqlite3.connect('qvapay.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO p2p_trades (trade_id, order_id, buyer_id, seller_id, amount, price, total, status)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (trade_id, order_id, buyer_id, seller_id, amount, price, total, status))
    conn.commit()
    conn.close()

# Registrar producto comprado
def log_product_purchase(user_id, product_id, product_name, price_paid):
    conn = sqlite3.connect('qvapay.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO user_products (user_id, product_id, product_name, price_paid)
        VALUES (?, ?, ?, ?)
    ''', (user_id, product_id, product_name, price_paid))
    conn.commit()
    conn.close()

# Teclado principal estilo QvaPay
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üí∞ Balance')
    btn2 = types.KeyboardButton('üîÑ Operaciones')
    btn3 = types.KeyboardButton('ü§ù Mercado P2P')
    btn4 = types.KeyboardButton('üõí Tienda')
    btn5 = types.KeyboardButton('üéÅ Regalos')
    btn6 = types.KeyboardButton('üí≤ Ofertas P2P')
    btn7 = types.KeyboardButton('üí≥ MI VISA')
    btn8 = types.KeyboardButton('üîí VPN Gratis')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8)
    return markup

# Teclado de operaciones
def operations_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üì• Depositar')
    btn2 = types.KeyboardButton('üì§ Retirar')
    btn3 = types.KeyboardButton('üîÑ Transferir')
    btn4 = types.KeyboardButton('üí± Convertir')
    btn5 = types.KeyboardButton('üîô Volver al Men√∫')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

# Teclado P2P
def p2p_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üõí Comprar QVP')
    btn2 = types.KeyboardButton('üí∞ Vender QVP')
    btn3 = types.KeyboardButton('üìä Mis √ìrdenes')
    btn4 = types.KeyboardButton('ü§ù Mis Trades')
    btn5 = types.KeyboardButton('üîô Volver al Men√∫')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

# Teclado tienda
def shop_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üéÆ Juegos Digitales')
    btn2 = types.KeyboardButton('üì± Recargas')
    btn3 = types.KeyboardButton('üéµ Streaming')
    btn4 = types.KeyboardButton('üíº Software')
    btn5 = types.KeyboardButton('üîô Volver al Men√∫')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

# Teclado s√≠/no
def yes_no_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('‚úÖ S√≠')
    btn2 = types.KeyboardButton('‚ùå No')
    btn3 = types.KeyboardButton('üîô Volver al Men√∫')
    markup.add(btn1, btn2, btn3)
    return markup

# COMANDO START - Dise√±o similar a QvaPay
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    register_user(user_id, username, first_name)
    user_info = get_user_info(user_id)
    
    welcome_text = f"""
¬°Hola {escape_markdown(first_name)}!

Bienvenido a QvaPay, la forma m√°s f√°cil de recibir y enviar pagos a nivel mundial.

Tu cuenta de Telegram ya est√° vinculada a una cuenta de QvaPay con el usuario **{user_info[4]}**

Desde aqu√≠ podr√°s consultar tu balance, enviar dinero a otros usuarios, procesar operaciones P2P y hasta ganar dinero invitando a otros."""

    bot.send_message(
        chat_id=message.chat.id,
        text=welcome_text,
        parse_mode='Markdown',
        reply_markup=main_menu()
    )

# MANEJADOR DEL MEN√ö PRINCIPAL
@bot.message_handler(func=lambda message: True)
def handle_main_menu(message):
    user_id = message.from_user.id
    text = message.text
    
    if text == 'üí∞ Balance':
        show_balance(message)
    elif text == 'üîÑ Operaciones':
        show_operations_menu(message)
    elif text == 'ü§ù Mercado P2P':
        show_p2p_menu(message)
    elif text == 'üõí Tienda':
        show_shop_menu(message)
    elif text == 'üéÅ Regalos':
        show_gifts(message)
    elif text == 'üí≤ Ofertas P2P':
        show_p2p_offers(message)
    elif text == 'üí≥ MI VISA':
        show_visa_card(message)
    elif text == 'üîí VPN Gratis':
        show_vpn(message)
    elif text == 'üîô Volver al Men√∫':
        bot.send_message(message.chat.id, "üè† Men√∫ Principal:", reply_markup=main_menu())

# FUNCI√ìN DE BALANCE
def show_balance(message):
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    cup_rate = get_cup_usd_rate()
    
    balance_text = f"""
üí∞ *BALANCE QVAPAY*

üë§ Usuario: {escape_markdown(user_info[4])}
üíé Saldo QVP: *{user_info[3]:.2f} QVP*
üíµ Equivalente: *{user_info[3] * cup_rate:,.0f} CUP*

üí± *Tasa actual:* 1 QVP = {cup_rate:,.0f} CUP

üí≥ *Disponible para operar:* {user_info[3]:.2f} QVP"""

    bot.send_message(
        message.chat.id,
        balance_text,
        parse_mode='Markdown',
        reply_markup=main_menu()
    )

# FUNCI√ìN DE OPERACIONES
def show_operations_menu(message):
    operations_text = """
üîÑ *MEN√ö DE OPERACIONES*

Elige el tipo de operaci√≥n que deseas realizar:

üì• *Depositar* - Agregar fondos a tu cuenta
üì§ *Retirar* - Retirar fondos a tu cuenta bancaria
üîÑ *Transferir* - Enviar dinero a otros usuarios
üí± *Convertir* - Cambiar entre diferentes monedas"""

    bot.send_message(
        message.chat.id,
        operations_text,
        parse_mode='Markdown',
        reply_markup=operations_menu()
    )

# MANEJADOR DE OPERACIONES
@bot.message_handler(func=lambda message: message.text in ['üì• Depositar', 'üì§ Retirar', 'üîÑ Transferir', 'üí± Convertir', 'üîô Volver al Men√∫'])
def handle_operations(message):
    text = message.text
    
    if text == 'üì• Depositar':
        start_deposit(message)
    elif text == 'üì§ Retirar':
        start_withdrawal(message)
    elif text == 'üîÑ Transferir':
        start_transfer(message)
    elif text == 'üí± Convertir':
        start_conversion(message)
    elif text == 'üîô Volver al Men√∫':
        bot.send_message(message.chat.id, "üè† Men√∫ Principal:", reply_markup=main_menu())

# FUNCI√ìN DE DEP√ìSITO
def start_deposit(message):
    deposit_text = """
üì• *DEP√ìSITO DE FONDOS*

Selecciona el m√©todo de dep√≥sito:

üí≥ *Transferm√≥vil* - Dep√≥sito en CUP
üîµ *EnZona* - Dep√≥sito en CUP
‚Çø *Criptomonedas* - Dep√≥sito en BTC, ETH, USDT, etc.

üí° *Todos los dep√≥sitos se convierten autom√°ticamente a QVP*"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üí≥ Transferm√≥vil')
    btn2 = types.KeyboardButton('üîµ EnZona')
    btn3 = types.KeyboardButton('‚Çø Criptomonedas')
    btn4 = types.KeyboardButton('üîô Volver a Operaciones')
    markup.add(btn1, btn2, btn3, btn4)
    
    bot.send_message(
        message.chat.id,
        deposit_text,
        parse_mode='Markdown',
        reply_markup=markup
    )

# FUNCI√ìN DE RETIRO
def start_withdrawal(message):
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    
    withdrawal_text = f"""
üì§ *RETIRO DE FONDOS*

üíé *Saldo disponible:* {user_info[3]:.2f} QVP

Selecciona el m√©todo de retiro:

üí≥ *Tarjeta bancaria* - Retiro en CUP
‚Çø *Criptomonedas* - Retiro en BTC, ETH, USDT, etc.

‚ö†Ô∏è *Comisi√≥n de retiro:* 2%"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üí≥ Retiro a Tarjeta')
    btn2 = types.KeyboardButton('‚Çø Retiro Crypto')
    btn3 = types.KeyboardButton('üîô Volver a Operaciones')
    markup.add(btn1, btn2, btn3)
    
    bot.send_message(
        message.chat.id,
        withdrawal_text,
        parse_mode='Markdown',
        reply_markup=markup
    )

# FUNCI√ìN DE TRANSFERENCIA
def start_transfer(message):
    transfer_text = """
üîÑ *TRANSFERENCIA A OTROS USUARIOS*

Puedes transferir QVP a otros usuarios de QvaPay de forma instant√°nea y sin comisiones.

üí° *Para transferir:*
1. Obt√©n el QvaPay ID del destinatario
2. Confirma la transferencia
3. El dinero llegar√° instant√°neamente

¬øDeseas continuar con la transferencia?"""

    bot.send_message(
        message.chat.id,
        transfer_text,
        parse_mode='Markdown',
        reply_markup=yes_no_keyboard()
    )

# FUNCI√ìN DE CONVERSI√ìN
def start_conversion(message):
    conversion_text = """
üí± *CONVERSI√ìN DE MONEDAS*

Convierte entre diferentes monedas al tipo de cambio actual:

üîÑ QVP ‚áÑ CUP
üîÑ QVP ‚áÑ Criptomonedas
üîÑ Criptomonedas ‚áÑ CUP

üí° *Tipos de cambio en tiempo real*
üí° *Comisiones competitivas*

¬øQu√© conversi√≥n deseas realizar?"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üîÑ QVP a CUP')
    btn2 = types.KeyboardButton('üîÑ CUP a QVP')
    btn3 = types.KeyboardButton('‚Çø QVP a Crypto')
    btn4 = types.KeyboardButton('‚Çø Crypto a QVP')
    btn5 = types.KeyboardButton('üîô Volver a Operaciones')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    
    bot.send_message(
        message.chat.id,
        conversion_text,
        parse_mode='Markdown',
        reply_markup=markup
    )

# FUNCI√ìN MERCADO P2P
def show_p2p_menu(message):
    p2p_text = """
ü§ù *MERCADO P2P QVAPAY*

Compra y vende QVP directamente con otros usuarios de forma segura.

üîí *Sistema de seguridad:*
‚Ä¢ Dep√≥sito en garant√≠a (escrow)
‚Ä¢ Tiempo l√≠mite para completar
‚Ä¢ Soporte de disputas
‚Ä¢ Calificaci√≥n de usuarios

üí° *¬øC√≥mo funciona?*
1. Publicas tu oferta de compra/venta
2. Otro usuario acepta tu oferta
3. Realizan el trade de forma segura
4. Califican la experiencia"""

    bot.send_message(
        message.chat.id,
        p2p_text,
        parse_mode='Markdown',
        reply_markup=p2p_menu()
    )

# MANEJADOR P2P
@bot.message_handler(func=lambda message: message.text in ['üõí Comprar QVP', 'üí∞ Vender QVP', 'üìä Mis √ìrdenes', 'ü§ù Mis Trades'])
def handle_p2p(message):
    text = message.text
    
    if text == 'üõí Comprar QVP':
        show_buy_orders(message)
    elif text == 'üí∞ Vender QVP':
        show_sell_orders(message)
    elif text == 'üìä Mis √ìrdenes':
        show_my_orders(message)
    elif text == 'ü§ù Mis Trades':
        show_my_trades(message)

# MOSTRAR √ìRDENES DE COMPRA
def show_buy_orders(message):
    # Simular √≥rdenes de compra activas
    buy_orders_text = """
üõí *√ìRDENES DE COMPRA ACTIVAS*

üìä *Oferta #1:*
‚Ä¢ Usuario: QVP_Comprador1
‚Ä¢ Compra: 100 QVP
‚Ä¢ Precio: 245 CUP/QVP
‚Ä¢ M√©todo: Transferm√≥vil
‚Ä¢ L√≠mite: 15 min

üìä *Oferta #2:*
‚Ä¢ Usuario: QVP_Comprador2  
‚Ä¢ Compra: 50 QVP
‚Ä¢ Precio: 248 CUP/QVP
‚Ä¢ M√©todo: EnZona
‚Ä¢ L√≠mite: 30 min

üìä *Oferta #3:*
‚Ä¢ Usuario: QVP_Comprador3
‚Ä¢ Compra: 200 QVP
‚Ä¢ Precio: 242 CUP/QVP
‚Ä¢ M√©todo: Transferm√≥vil
‚Ä¢ L√≠mite: 10 min

üí° *Selecciona una oferta para continuar*"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('‚úÖ Aceptar Oferta #1')
    btn2 = types.KeyboardButton('‚úÖ Aceptar Oferta #2')
    btn3 = types.KeyboardButton('‚úÖ Aceptar Oferta #3')
    btn4 = types.KeyboardButton('üîô Volver a P2P')
    markup.add(btn1, btn2, btn3, btn4)
    
    bot.send_message(
        message.chat.id,
        buy_orders_text,
        parse_mode='Markdown',
        reply_markup=markup
    )

# MOSTRAR √ìRDENES DE VENTA
def show_sell_orders(message):
    # Simular √≥rdenes de venta activas
    sell_orders_text = """
üí∞ *√ìRDENES DE VENTA ACTIVAS*

üìä *Oferta #1:*
‚Ä¢ Usuario: QVP_Vendedor1
‚Ä¢ Venta: 150 QVP
‚Ä¢ Precio: 250 CUP/QVP
‚Ä¢ M√©todo: Transferm√≥vil
‚Ä¢ L√≠mite: 20 min

üìä *Oferta #2:*
‚Ä¢ Usuario: QVP_Vendedor2
‚Ä¢ Venta: 75 QVP  
‚Ä¢ Precio: 252 CUP/QVP
‚Ä¢ M√©todo: EnZona
‚Ä¢ L√≠mite: 25 min

üìä *Oferta #3:*
‚Ä¢ Usuario: QVP_Vendedor3
‚Ä¢ Venta: 300 QVP
‚Ä¢ Precio: 248 CUP/QVP
‚Ä¢ M√©todo: Transferm√≥vil
‚Ä¢ L√≠mite: 15 min

üí° *Selecciona una oferta para continuar*"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('‚úÖ Aceptar Oferta #1')
    btn2 = types.KeyboardButton('‚úÖ Aceptar Oferta #2')
    btn3 = types.KeyboardButton('‚úÖ Aceptar Oferta #3')
    btn4 = types.KeyboardButton('üîô Volver a P2P')
    markup.add(btn1, btn2, btn3, btn4)
    
    bot.send_message(
        message.chat.id,
        sell_orders_text,
        parse_mode='Markdown',
        reply_markup=markup
    )

# MOSTRAR MIS √ìRDENES
def show_my_orders(message):
    user_id = message.from_user.id
    
    my_orders_text = f"""
üìä *MIS √ìRDENES ACTIVAS*

Actualmente no tienes √≥rdenes activas.

üí° *Para crear una orden:*
‚Ä¢ Ve a *\"Comprar QVP\"* o *\"Vender QVP\"*
‚Ä¢ Configura tu precio y cantidad
‚Ä¢ Publica tu orden

üîí *Tus √≥rdenes anteriores se mostrar√°n aqu√≠*"""

    bot.send_message(
        message.chat.id,
        my_orders_text,
        parse_mode='Markdown',
        reply_markup=p2p_menu()
    )

# MOSTRAR MIS TRADES
def show_my_trades(message):
    user_id = message.from_user.id
    
    my_trades_text = f"""
ü§ù *MIS TRADES RECIENTES*

No hay trades recientes.

üí° *Cuando realices trades P2P:*
‚Ä¢ Se mostrar√°n aqu√≠
‚Ä¢ Podr√°s calificar a los usuarios
‚Ä¢ Tendr√°s historial completo

üîí *Sistema seguro con dep√≥sito en garant√≠a*"""

    bot.send_message(
        message.chat.id,
        my_trades_text,
        parse_mode='Markdown',
        reply_markup=p2p_menu()
    )

# FUNCI√ìN TIENDA
def show_shop_menu(message):
    shop_text = """
üõí *TIENDA QVAPAY*

Compra productos digitales y servicios con tu saldo QVP.

üì¶ *Categor√≠as disponibles:*

üéÆ *Juegos Digitales* - Steam, PlayStation, Xbox
üì± *Recargas* - Datos, minutos, SMS
üéµ *Streaming* - Spotify, Netflix, Disney+
üíº *Software* - Office, antivirus, herramientas

üí° *Todos los productos se entregan instant√°neamente*"""

    bot.send_message(
        message.chat.id,
        shop_text,
        parse_mode='Markdown',
        reply_markup=shop_menu()
    )

# MANEJADOR TIENDA
@bot.message_handler(func=lambda message: message.text in ['üéÆ Juegos Digitales', 'üì± Recargas', 'üéµ Streaming', 'üíº Software'])
def handle_shop_categories(message):
    text = message.text
    
    if text == 'üéÆ Juegos Digitales':
        show_games_products(message)
    elif text == 'üì± Recargas':
        show_mobile_products(message)
    elif text == 'üéµ Streaming':
        show_streaming_products(message)
    elif text == 'üíº Software':
        show_software_products(message)

# MOSTRAR PRODUCTOS DE JUEGOS
def show_games_products(message):
    products_text = """
üéÆ *JUEGOS DIGITALES*

üõí *Productos disponibles:*

1. üéÆ *Steam Wallet $10*
   üí∞ Precio: 2,500 CUP
   üì¶ Stock: 50 unidades

2. üéÆ *Steam Wallet $20*
   üí∞ Precio: 5,000 CUP  
   üì¶ Stock: 30 unidades

3. üéÆ *PlayStation Network $10*
   üí∞ Precio: 2,600 CUP
   üì¶ Stock: 25 unidades

4. üéÆ *Xbox Gift Card $10*
   üí∞ Precio: 2,550 CUP
   üì¶ Stock: 20 unidades

üí° *Selecciona el n√∫mero del producto para comprar*"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üõí Comprar Producto 1')
    btn2 = types.KeyboardButton('üõí Comprar Producto 2')
    btn3 = types.KeyboardButton('üõí Comprar Producto 3')
    btn4 = types.KeyboardButton('üõí Comprar Producto 4')
    btn5 = types.KeyboardButton('üîô Volver a Tienda')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    
    bot.send_message(
        message.chat.id,
        products_text,
        parse_mode='Markdown',
        reply_markup=markup
    )

# MOSTRAR PRODUCTOS M√ìVILES
def show_mobile_products(message):
    products_text = """
üì± *RECARGAS M√ìVILES*

üõí *Productos disponibles:*

1. üì± *Recarga M√≥vil 5GB*
   üí∞ Precio: 1,200 CUP
   üì¶ Stock: 100 unidades

2. üì± *Recarga M√≥vil 10GB*  
   üí∞ Precio: 2,200 CUP
   üì¶ Stock: 80 unidades

3. üì± *Recarga M√≥vil 20GB*
   üí∞ Precio: 4,000 CUP
   üì¶ Stock: 60 unidades

4. üì± *Paquete Minutos 100*
   üí∞ Precio: 800 CUP
   üì¶ Stock: 120 unidades

üí° *Selecciona el n√∫mero del producto para comprar*"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üõí Comprar Producto 1')
    btn2 = types.KeyboardButton('üõí Comprar Producto 2')
    btn3 = types.KeyboardButton('üõí Comprar Producto 3')
    btn4 = types.KeyboardButton('üõí Comprar Producto 4')
    btn5 = types.KeyboardButton('üîô Volver a Tienda')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    
    bot.send_message(
        message.chat.id,
        products_text,
        parse_mode='Markdown',
        reply_markup=markup
    )

# FUNCIONES ADICIONALES (simplificadas)
def show_gifts(message):
    gifts_text = """
üéÅ *SISTEMA DE REGALOS*

Env√≠a regalos a tus amigos y familiares:

üíù *Regalo Directo* - Env√≠a QVP como regalo
üéâ *C√≥digo Regalo* - Crea c√≥digos canjeables
üë• *Invitaciones* - Gana comisiones por invitar

üí° *Pr√≥ximamente...*"""

    bot.send_message(
        message.chat.id,
        gifts_text,
        parse_mode='Markdown',
        reply_markup=main_menu()
    )

def show_p2p_offers(message):
    offers_text = """
üí≤ *OFERTAS P2P DESTACADAS*

üèÜ *Ofertas verificadas:*

‚≠ê *Vendedor Premium: QVP_Trusted1*
‚Ä¢ Calificaci√≥n: 4.9/5.0
‚Ä¢ Trades: 1,245 completados
‚Ä¢ Tiempo respuesta: < 5 min

‚≠ê *Comprador Premium: QVP_BuyerPro*
‚Ä¢ Calificaci√≥n: 4.8/5.0  
‚Ä¢ Trades: 890 completados
‚Ä¢ Tiempo respuesta: < 3 min

üí° *Usuarios verificados = Mayor seguridad*"""

    bot.send_message(
        message.chat.id,
        offers_text,
        parse_mode='Markdown',
        reply_markup=main_menu()
    )

def show_visa_card(message):
    visa_text = """
üí≥ *TARJETA VISA QVAPAY*

Pr√≥ximamente podr√°s solicitar tu tarjeta Visa f√≠sica y virtual vinculada a tu cuenta QvaPay.

üåü *Beneficios:*
‚Ä¢ Compras online internacionales
‚Ä¢ Retiros en cajeros autom√°ticos
‚Ä¢ Pagos en establecimientos
‚Ä¢ Seguridad avanzada

üìÖ *Disponible pronto...*"""

    bot.send_message(
        message.chat.id,
        visa_text,
        parse_mode='Markdown',
        reply_markup=main_menu()
    )

def show_vpn(message):
    vpn_text = """
üîí *VPN GRATIS QVAPAY*

Protege tu privacidad y navegaci√≥n con nuestro servicio VPN gratuito.

üõ°Ô∏è *Caracter√≠sticas:*
‚Ä¢ Conexi√≥n segura y encriptada
‚Ä¢ Sin l√≠mites de ancho de banda
‚Ä¢ Servidores en m√∫ltiples pa√≠ses
‚Ä¢ F√°cil configuraci√≥n

üåê *Para activar tu VPN gratuita:*
Visita: https://qvapay.com/vpn

üí° *Disponible para todos los usuarios*"""

    bot.send_message(
        message.chat.id,
        vpn_text,
        parse_mode='Markdown',
        reply_markup=main_menu()
    )

# MOSTRAR PRODUCTOS STREAMING
def show_streaming_products(message):
    products_text = """
üéµ *SERVICIOS DE STREAMING*

üõí *Productos disponibles:*

1. üéµ *Spotify Premium 1 Mes*
   üí∞ Precio: 800 CUP
   üì¶ Stock: 30 unidades

2. üì∫ *Netflix Basic 1 Mes*
   üí∞ Precio: 1,800 CUP
   üì¶ Stock: 25 unidades

3. üé¨ *Disney+ 1 Mes*
   üí∞ Precio: 1,500 CUP
   üì¶ Stock: 20 unidades

4. üé• *HBO Max 1 Mes*
   üí∞ Precio: 1,600 CUP
   üì¶ Stock: 15 unidades

üí° *Selecciona el n√∫mero del producto para comprar*"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üõí Comprar Spotify')
    btn2 = types.KeyboardButton('üõí Comprar Netflix')
    btn3 = types.KeyboardButton('üõí Comprar Disney+')
    btn4 = types.KeyboardButton('üõí Comprar HBO Max')
    btn5 = types.KeyboardButton('üîô Volver a Tienda')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    
    bot.send_message(
        message.chat.id,
        products_text,
        parse_mode='Markdown',
        reply_markup=markup
    )

# MOSTRAR PRODUCTOS SOFTWARE
def show_software_products(message):
    products_text = """
üíº *SOFTWARE Y HERRAMIENTAS*

üõí *Productos disponibles:*

1. üíª *Microsoft Office 365 1 A√±o*
   üí∞ Precio: 3,000 CUP
   üì¶ Stock: 15 unidades

2. üõ°Ô∏è *Antivirus Premium 1 A√±o*
   üí∞ Precio: 1,200 CUP
   üì¶ Stock: 40 unidades

3. üé® *Adobe Creative Cloud 1 Mes*
   üí∞ Precio: 2,500 CUP
   üì¶ Stock: 10 unidades

4. üîß *Windows 11 Pro Licencia*
   üí∞ Precio: 4,000 CUP
   üì¶ Stock: 8 unidades

üí° *Selecciona el n√∫mero del producto para comprar*"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üõí Comprar Office')
    btn2 = types.KeyboardButton('üõí Comprar Antivirus')
    btn3 = types.KeyboardButton('üõí Comprar Adobe')
    btn4 = types.KeyboardButton('üõí Comprar Windows')
    btn5 = types.KeyboardButton('üîô Volver a Tienda')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    
    bot.send_message(
        message.chat.id,
        products_text,
        parse_mode='Markdown',
        reply_markup=markup
    )

# SISTEMA DE P2P CON ESCROW
def create_p2p_trade(message, order_type, amount, price, payment_method):
    user_id = message.from_user.id
    trade_id = f"TRADE{uuid.uuid4().hex[:10].upper()}"
    
    # Simular creaci√≥n de trade
    p2p_trades[trade_id] = {
        'trade_id': trade_id,
        'user_id': user_id,
        'order_type': order_type,
        'amount': amount,
        'price': price,
        'total': amount * price,
        'payment_method': payment_method,
        'status': 'pending',
        'created_at': datetime.now()
    }
    
    trade_text = f"""
ü§ù *TRADE P2P CREADO*

üÜî *Trade ID:* {trade_id}
üíº *Tipo:* {'Compra' if order_type == 'buy' else 'Venta'}
üíé *Cantidad:* {amount} QVP
üí∞ *Precio:* {price} CUP/QVP
üíµ *Total:* {amount * price} CUP
üí≥ *M√©todo:* {payment_method}

üîí *Estado:* En espera de contraparte
‚è∞ *Tiempo l√≠mite:* 30 minutos

üí° *Instrucciones:*
1. Espera a que alguien acepte tu trade
2. Una vez aceptado, tendr√°s 30 min para completar
3. El pago se mantiene en garant√≠a
4. Se libera cuando ambas partes confirman"""

    bot.send_message(
        message.chat.id,
        trade_text,
        parse_mode='Markdown',
        reply_markup=p2p_menu()
    )

# INICIALIZACI√ìN Y EJECUCI√ìN
def run_bot():
    print("üß† Inicializando base de datos...")
    init_db()
    print("ü§ñ Iniciando bot QvaPay...")
    print(f"üëë Administrador: {ADMIN_ID}")
    
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"Error en el bot: {e}")
        time.sleep(10)
        run_bot()

if __name__ == "__main__":
    # Iniciar el bot en un hilo separado
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # Iniciar el servidor web para Render
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
